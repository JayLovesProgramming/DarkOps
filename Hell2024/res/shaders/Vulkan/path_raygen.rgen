#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable

struct CameraData {
    mat4 projection;
    mat4 projectionInverse;
    mat4 view;
    mat4 viewInverse;
	float viewportWidth;
	float viewportHeight;   
    float viewportOffsetX;
    float viewportOffsetY; 
	float clipSpaceXMin;
    float clipSpaceXMax;
    float clipSpaceYMin;
    float clipSpaceYMax;
	float finalImageColorContrast;
    float finalImageColorR;
    float finalImageColorG;
    float finalImageColorB;
};

layout(set = 0, binding = 0) readonly buffer BUFFER_CAM_DATA {
    CameraData[4] data;
} cameraData;


struct RayPayload {
	vec4 color;
	int lightIndex;
	float viewPosX;
	float viewPosY;
	float viewPosZ;
};


struct Light {
	float posX;
	float posY;
	float posZ;
	float colorR;
	float colorG;
	float colorB;
	float strength;
	float radius;
};

layout(location = 0) rayPayloadEXT RayPayload rayPayload;
layout(location = 1) rayPayloadEXT bool isShadowed;

layout(set = 0, binding = 3) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = 4) readonly buffer B {Light data[];} lights;
//layout(set = 0, binding = 4, scalar) readonly buffer B {Light data[];} lights;

layout(set = 1, binding = 0) uniform sampler samp;

layout(set = 2, binding = 0) uniform sampler2D baseColorTexture;
layout(set = 2, binding = 1) uniform sampler2D normalTexture;
layout(set = 2, binding = 2) uniform sampler2D rmaTexture;
layout(set = 2, binding = 3) uniform sampler2D depthTexture;

layout(set = 3, binding = 2, rgba8) uniform image2D outputImage;


const float PI = 3.14159265359;









/////////////////////////
//                     //
//   Direct Lighting   //


float D_GGX(float NoH, float roughness) {
  float alpha = roughness * roughness;
  float alpha2 = alpha * alpha;
  float NoH2 = NoH * NoH;
  float b = (NoH2 * (alpha2 - 1.0) + 1.0);
  return alpha2 / (PI * b * b);
}

float G1_GGX_Schlick(float NdotV, float roughness) {
  //float r = roughness; // original
  float r = 0.5 + 0.5 * roughness; // Disney remapping
  float k = (r * r) / 2.0;
  float denom = NdotV * (1.0 - k) + k;
  return NdotV / denom;
}

float G_Smith(float NoV, float NoL, float roughness) {
  float g1_l = G1_GGX_Schlick(NoL, roughness);
  float g1_v = G1_GGX_Schlick(NoV, roughness);
  return g1_l * g1_v;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 microfacetBRDF(in vec3 L, in vec3 V, in vec3 N, in vec3 baseColor, in float metallicness, in float fresnelReflect, in float roughness, in vec3 WorldPos, out vec3 outColor) {
  vec3 H = normalize(V + L); // half vector
  // all required dot products
  float NoV = clamp(dot(N, V), 0.0, 1.0);
  float NoL = clamp(dot(N, L), 0.0, 1.0);
  float NoH = clamp(dot(N, H), 0.0, 1.0);
  float VoH = clamp(dot(V, H), 0.0, 1.0);       
  // F0 for dielectics in range [0.0, 0.16] 
  // default FO is (0.16 * 0.5^2) = 0.04
  vec3 f0 = vec3(0.16 * (fresnelReflect * fresnelReflect)); 
  // f0 = vec3(0.125);
  // in case of metals, baseColor contains F0
  f0 = mix(f0, baseColor, metallicness);
  // specular microfacet (cook-torrance) BRDF
  vec3 F = fresnelSchlick(VoH, f0);
  float D = D_GGX(NoH, roughness);
  float G = G_Smith(NoV, NoL, roughness);
  vec3 spec = (D * G * F) / max(4.0 * NoV * NoL, 0.001);  

  // diffuse
  vec3 notSpec = vec3(1.0) - F; // if not specular, use as diffuse
  notSpec *= 1.0 - metallicness; // no diffuse for metals
  vec3 diff = notSpec * baseColor / PI;   
  spec *= 1.05;
  vec3 result = diff + spec;

  float test = (notSpec.x + notSpec.y + notSpec.z) * 0.33;
  
  test = 1 - test;
  test *= (1 - roughness);
  test *= metallicness;
  //result = vec3(test * test);

  outColor = vec3(test * test);

  float test2 = (spec.x + spec.y + spec.z) * 0.33;
 // result = vec3(spec);

  return result;
}

struct DirectLightingResult {
	vec3 color;
	vec3 specularAmount;
};

DirectLightingResult GetDirectLighting(vec3 lightPos, vec3 lightColor, float radius, float strength, vec3 Normal, vec3 WorldPos, vec3 baseColor, float roughness, float metallic, vec3 viewPos) {
	float fresnelReflect = 1.0; // 0.5 is what they used for box, 1.0 for demon


	vec3 viewDir = normalize(viewPos - WorldPos);    
	float lightRadiance = strength * 1;// * 1.25;
	vec3 lightDir = normalize(lightPos - WorldPos); 
	float lightAttenuation = smoothstep(radius, 0, length(lightPos - WorldPos));
	// lightAttenuation = clamp(lightAttenuation, 0.0, 0.9); // THIS IS WRONG, but does stop super bright region around light source and doesn't seem to affect anything else...
	float irradiance = max(dot(lightDir, Normal), 0.0) ;
	irradiance *= lightAttenuation * lightRadiance;		



	DirectLightingResult result;	
	vec3 brdf = microfacetBRDF(lightDir, viewDir, Normal, baseColor, metallic, fresnelReflect, roughness, WorldPos, result.specularAmount);

	
	result.color =  brdf * irradiance * clamp(lightColor, 0, 1);

	return result;

	//return brdf * irradiance * clamp(lightColor, 0, 1);
}








//////////////////////
//                  //
//   Tone mapping   //

vec3 filmic(vec3 x) {
  vec3 X = max(vec3(0.0), x - 0.004);
  vec3 result = (X * (6.2 * X + 0.5)) / (X * (6.2 * X + 1.7) + 0.06);
  return pow(result, vec3(2.2));
}

float filmic(float x) {
  float X = max(0.0, x - 0.004);
  float result = (X * (6.2 * X + 0.5)) / (X * (6.2 * X + 1.7) + 0.06);
  return pow(result, 2.2);
}

vec3 Tonemap_ACES(const vec3 x) { // Narkowicz 2015, "ACES Filmic Tone Mapping Curve"
    const float a = 2.51;
    const float b = 0.03;
    const float c = 2.43;
    const float d = 0.59;
    const float e = 0.14;
    return (x * (a * x + b)) / (x * (c * x + d) + e);
}



float map(float value, float min1, float max1, float min2, float max2) {
	float perc = (value - min1) / (max1 - min1);
	return perc * (max2 - min2) + min2;
}

void main() {

	// Get UVs from pixel position
	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 texCoord = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	
	int playerIndex = int(texture(normalTexture, texCoord).a * 4 + 0.5);

	mat4 proj = cameraData.data[playerIndex].projection;
	mat4 view = cameraData.data[playerIndex].view;
	mat4 projectionInverse = cameraData.data[playerIndex].projectionInverse;
	mat4 viewInverse = cameraData.data[playerIndex].viewInverse;
	vec3 viewPos = cameraData.data[playerIndex].viewInverse[3].xyz;
	
	float clipSpaceXMin = cameraData.data[playerIndex].clipSpaceXMin;
	float clipSpaceXMax = cameraData.data[playerIndex].clipSpaceXMax;
	float clipSpaceYMin = cameraData.data[playerIndex].clipSpaceYMin;
	float clipSpaceYMax = cameraData.data[playerIndex].clipSpaceYMax;


	
	//clipSpaceXMin = 0;
	//clipSpaceXMax = 1;
	//clipSpaceYMin = 0.5;
	//clipSpaceYMax = 1.0;
	
	//clipSpaceXMin = 0;
	//clipSpaceXMax = 1;
	//clipSpaceYMin = 0.0;
	//clipSpaceYMax = 1.0;


	

	vec2 d = texCoord * 2.0 - 1.0;
	// Sample G Buffer

	vec3 baseColor = texture(baseColorTexture, texCoord).rgb;
	baseColor.rgb = pow(baseColor.rgb, vec3(2.2));
	vec3 normal = texture(normalTexture, texCoord).rgb;
	vec3 rma = texture(rmaTexture, texCoord).rgb;
	float z = texture(depthTexture, texCoord).x;// * 2.0f - 1.0f;
	float roughness = rma.r;
	float metallic = rma.g;

	// Reconstruct position from depth	
	const mat4 correction = mat4(1.0,  0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0,  0.0, 0.5, 0.0, 0.0,  0.0, 0.5, 1.0);	
    vec2 clipSpaceTexCoord = texCoord;
	clipSpaceTexCoord.x = map(clipSpaceTexCoord.x, clipSpaceXMin, clipSpaceXMax, 0.0, 1.0);
	clipSpaceTexCoord.y = map(clipSpaceTexCoord.y, clipSpaceYMin, clipSpaceYMax, 0.0, 1.0);
	vec4 clipSpacePosition = vec4(clipSpaceTexCoord * 2.0 - 1.0, z, 1.0);
    vec4 viewSpacePosition = projectionInverse * clipSpacePosition;
    viewSpacePosition /= viewSpacePosition.w;
    vec4 worldSpacePosition = viewInverse * viewSpacePosition;    
    vec3 WorldPos = worldSpacePosition.xyz;
	


	//float z = texture(depthTexture, TexCoords).x;
	/*
    vec2 clipSpaceTexCoord = texCoord;
	clipSpaceTexCoord.x = map(clipSpaceTexCoord.x, clipSpaceXMin, clipSpaceXMax, 0.0, 1.0);
	clipSpaceTexCoord.y = map(clipSpaceTexCoord.y, clipSpaceYMin, clipSpaceYMax, 0.0, 1.0);
	vec4 clipSpacePosition = vec4(clipSpaceTexCoord * 2.0 - 1.0, z, 1.0);
    vec4 viewSpacePosition = projectionInverse * clipSpacePosition;
    viewSpacePosition /= viewSpacePosition.w;
    vec4 worldSpacePosition = viewInverse * viewSpacePosition;    
    vec3 WorldPos = worldSpacePosition.xyz;


	*/




	vec3 color = vec3(0, 0, 0);

	vec4 target = projectionInverse * vec4(d.x, d.y, 1, 1) ;		
	uint flags = gl_RayFlagsCullFrontFacingTrianglesEXT;
	uint cullMask = 0xff;
	float minRayDist = 0.001;
	float maxRayDist = 1000.0;

	vec4 cameraDirection = viewInverse * vec4(normalize(target.xyz / target.w), 0);	
	//vec3 rayDirection = reflect(cameraDirection.xyz, normal);

	

	rayPayload.color = vec4(0, 0, 1, 1);
	rayPayload.viewPosX = viewPos.x;
	rayPayload.viewPosY = viewPos.y;
	rayPayload.viewPosZ = viewPos.z;


	vec3 debugColor = vec3(1,0,0);

	for (int i = 0; i < 8; i++) {

		Light light = lights.data[i];		
		vec3 lightPosition = vec3(light.posX, light.posY, light.posZ);
		vec3 lightColor = vec3(light.colorR, light.colorG, light.colorB);
		vec3 L = normalize(lightPosition - WorldPos);
		float dist = distance(lightPosition, WorldPos); 
		
		//vec3 rayDirection = reflect(L, normal);
		vec3 rayDirection = reflect(cameraDirection.rgb, normal);

		
			//debugColor =  rayDirection * vec3(-1, 1, 1);

		rayQueryEXT rayQuery;
		rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, WorldPos, 0.01, L, dist);

		// Traverse the acceleration structure and store information about the first intersection (if any)
		rayQueryProceedEXT(rayQuery);

		// If the intersection has hit a triangle, the fragment is shadowed
		if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT ) {
			//color = vec3(0,0,0);
		}
		// If not, begin the adventure
		else {

			// TODO: calculate direct lighting

			// REFLECTION:
			
			//traceRayEXT(topLevelAS,	flags, 0xFF, 0, 0, 1, WorldPos, minRayDist, rayDirection, maxRayDist, 1);
			
			rayPayload.lightIndex = i;

			traceRayEXT(topLevelAS, flags, cullMask, 0, 0, 0, WorldPos, minRayDist, rayDirection, maxRayDist, 0);

			vec3 reflectedColor = rayPayload.color.xyz;

			vec3 outColor2 = vec3(0,0,0);

			DirectLightingResult result = GetDirectLighting(lightPosition, lightColor, light.radius, light.strength, normal, WorldPos, baseColor.rgb, roughness, metallic, viewPos);

			//color = directLigthting + reflectedColor;
			//color = directLigthting;
			//color = outColor2;
			
			//color += mix(result.color, reflectedColor, metallic);
			
			color += result.color + (result.specularAmount * reflectedColor * roughness) ;
		//	color =  result.color + reflectedColor;
			//color +=  reflectedColor;
			//color = reflectedColor;

			//color = normal;
			//color = vec3(1, 1, 1);
		}




		
	}

	
	vec4 outputColor = vec4(color, 1); 

	outputColor.rgb = mix(outputColor.rgb, Tonemap_ACES(outputColor.rgb), 1.0);
	outputColor.rgb = mix(outputColor.rgb, Tonemap_ACES(outputColor.rgb), 0.35);	
	outputColor.rgb = pow(outputColor.rgb, vec3(1.0/2.2)); 

	
	// Vignette         
	vec2 uv = texCoord;//gl_FragCoord.xy / vec2(screenWidth * 1, screenHeight * 1);
	uv *=  1.0 - uv.yx;           
	float vig = uv.x*uv.y * 15.0;	// multiply with sth for intensity    
	vig = pow(vig, 0.05);			// change pow for modifying the extend of the  vignette    
	outputColor.rgb *= vec3(vig);
	
	// Some more YOLO tone mapping
	outputColor.rgb = mix(outputColor.rgb, Tonemap_ACES(outputColor.rgb), 0.995);	

	// Add the noise
	// TO DO : FragColor.rgb = FragColor.rgb + (x * -noiseFactor) + (noiseFactor / 2);

	// Contrast
	float contrast = 1.15;
	vec3 finalColor = outputColor.rgb;
	outputColor.rgb = outputColor.rgb * contrast;

	// Brightness
	outputColor.rgb -= vec3(0.010);

	//outputColor.rgb = vec3(pIndex);
	
	//outputColor.rgb = debugColor;
	
	imageStore(outputImage, ivec2(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y),  outputColor);

	
}



