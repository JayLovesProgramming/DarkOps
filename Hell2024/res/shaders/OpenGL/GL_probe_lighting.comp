#version 460 core

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout(rgba32f, binding = 0) uniform image3D texture3D;

uniform int probeSpaceWidth;
uniform int probeSpaceHeight;
uniform int probeSpaceDepth;
uniform float probeSpacing;
uniform vec3 lightVolumePosition;
uniform int cloudPointCount;
uniform int frameNumber;

struct BVHNode {
    vec3 aabbMin;
    int leftNode;
    vec3 aabbMax;
    int instanceCount;
};

struct BLASInstance {
    mat4 inverseModelMatrix;
    int blsaRootNodeIndex;
    int baseTriangleIndex;
	int baseVertex;
    int baseIndex;
};

struct Vertex {
    float position[3];
    float normal[3];
    float uv[2];
    float tangent[3];
	int materialIndex;
};

struct Ray {
	vec3 origin;
	vec3 dir;
	vec3 inverseDir;
    float t;
};

struct CloudPoint {
    float posX;
    float posY;
    float posZ;
    float normX;
    float normY;
    float normZ;
    float colorX;
    float colorY;
    float colorZ;
	float padding0;
	float padding1;
	float padding2;
};

layout(std430, binding = 2) readonly buffer pointCloud {
    CloudPoint PointCloud[];
};

layout(std430, binding = 20) readonly buffer vertices {
    Vertex Vertices[];
};

layout(std430, binding = 21) readonly buffer indices {
    uint Indices[];
};

layout(std430, binding = 22) readonly buffer blasNodes {
    BVHNode BLASNodes[];
};
layout(std430, binding = 23) readonly buffer tlasNodes {
    BVHNode TLASNodes[];
};

layout(std430, binding = 24) readonly buffer blasInstances {
    BLASInstance BLASInstances[];
};

layout(std430, binding = 25) readonly buffer triIndices {
    unsigned int TriIndices[];
};

struct RayResult {
	bool hitFound;
	vec3 hitPosition;
	float distanceToHit;
};

RayResult TriIntersect(vec3 origin, vec3 direction, float rayMin, float rayMax, vec3 v0, vec3 v1, vec3 v2) {

	RayResult rayResult;
	rayResult.hitFound = false;

	vec3 a = v0 - v1;
	vec3 b = v2 - v0;
	vec3 p = v0 - origin;
	vec3 n = cross(b, a);
	float r = dot(direction, n);

    //ignore back face
    if (r > 0)
		return rayResult;

	// some other early out
	if (abs(r) < 0.00001)
		return rayResult;

	vec3 q = cross( p, direction );
	r = 1.0 / r;
	float u = dot( q, b )*r;
	float v = dot( q, a )*r;
	float t = dot( n, p )*r;

	if( u<0.0 || v<0.0 || (u+v)>1.0 )
		t = -1.0;

	if (t > rayMin && t < rayMax) {
		rayResult.hitFound = true;
		rayResult.hitPosition = vec3( t, u, v );
		rayResult.distanceToHit = t;
		return rayResult;
	}
	return rayResult;
}


RayResult TriIntersect2(vec3 origin, vec3 direction, float rayMin, float rayMax, vec3 v0, vec3 v1, vec3 v2) {

	RayResult rayResult;
	rayResult.hitFound = false;

	const vec3 edge1 = v1 - v0;
	const vec3 edge2 = v2 - v0;
	const vec3 h = cross( direction, edge2 );
	const float a = dot( edge1, h );

	if (a > -0.0001 && a < 0.0001f) return rayResult; // ray parallel to triangle

	const float f = 1 / a;
	const vec3 s = origin - v0;
	const float u = f * dot( s, h );

	if (u < 0 || u > 1) rayResult;

	const vec3 q = cross( s, edge1 );
	const float v = f * dot( direction, q );

	if (v < 0 || u + v > 1)
		return rayResult;


	const float t = f * dot( edge2, q );

	if (t > 0.0001) {

		rayResult.distanceToHit = t;
		rayResult.hitFound = true;
		return rayResult;
		//ray.t = min( ray.t, t );
	}

	return rayResult;
}

bool TriIntersectBoolVersion(vec3 origin, vec3 direction, float rayMin, float rayMax, vec3 v0, vec3 v1, vec3 v2) {

	RayResult rayResult;
	rayResult.hitFound = false;

	vec3 a = v0 - v1;
	vec3 b = v2 - v0;
	vec3 p = v0 - origin;
	vec3 n = cross(b, a);
	float r = dot(direction, n);

    //ignore back face
	//if (r > 0)
	//	return false;

	// some other early out
	if (abs(r) < 0.00001)
		return false; // you removed this on the ragdoll renderer, maybe it introduces artefacts?

	vec3 q = cross( p, direction );
	r = 1.0 / r;
	float u = dot( q, b )*r;
	float v = dot( q, a )*r;
	float t = dot( n, p )*r;

	if( u<0.0 || v<0.0 || (u+v)>1.0 )
		t = -1.0;

	if (t > rayMin && t < rayMax) {
		return true;
	}
	return false;
}

float DistanceSquared( vec3 A, vec3 B ) {
    vec3 C = A - B;
    return dot( C, C );
}


float SafeInverse(float x) {
    const float epsilon = 0.001;
    if (abs(x) <= epsilon) {
        if (x >= 0) return 1.f / epsilon;
        return -1.f / epsilon;
    }
    return 1.f / x;
}

bool IntersectAABB(Ray ray, vec3 bmin, vec3 bmax) {
	float tx1 = (bmin.x - ray.origin.x) * ray.inverseDir.x, tx2 = (bmax.x - ray.origin.x) * ray.inverseDir.x;
    float tmin = min( tx1, tx2 ), tmax = max( tx1, tx2 );
    float ty1 = (bmin.y - ray.origin.y) * ray.inverseDir.y, ty2 = (bmax.y - ray.origin.y) * ray.inverseDir.y;
    tmin = max( tmin, min( ty1, ty2 ) ), tmax = min( tmax, max( ty1, ty2 ) );
    float tz1 = (bmin.z - ray.origin.z) * ray.inverseDir.z, tz2 = (bmax.z - ray.origin.z) * ray.inverseDir.z;
    tmin = max( tmin, min( tz1, tz2 ) ), tmax = min( tmax, max( tz1, tz2 ) );
    return tmax >= tmin && tmin < ray.t && tmax > 0;
}

vec3 IntersectBLAS(Ray ray, const uint nodeIdx, const uint blasIndex) {

	const mat4 inverseModelMatrix = BLASInstances[blasIndex].inverseModelMatrix;
	const unsigned int rootIndex = BLASInstances[blasIndex].blsaRootNodeIndex;
	const unsigned int baseTriangleIndex = BLASInstances[blasIndex].baseTriangleIndex;
	const unsigned int baseVertex = BLASInstances[blasIndex].baseVertex;
	const unsigned int baseIndex = BLASInstances[blasIndex].baseIndex;

	Ray adjustedRay;
	adjustedRay.dir = normalize(inverseModelMatrix * vec4(ray.dir, 0.0)).xyz;
	adjustedRay.origin = (inverseModelMatrix * vec4(ray.origin, 1.0)).xyz;
	adjustedRay.inverseDir.x = SafeInverse(adjustedRay.dir.x);
	adjustedRay.inverseDir.y = SafeInverse(adjustedRay.dir.y);
	adjustedRay.inverseDir.z = SafeInverse(adjustedRay.dir.z);
    adjustedRay.t = ray.t;

    // Create the stack
    uint stack[5];
    uint stackIndex = 0;

	// Push root node onto the stack
	stack[stackIndex] = rootIndex;
	stackIndex++;

    // Iterate the stack while it still contains nodes
    while (stackIndex > 0) {

        // Pop current node
        stackIndex--;

        uint currentNodeIndex = stack[stackIndex];
        BVHNode childNode = BLASNodes[currentNodeIndex];

        if (IntersectAABB( adjustedRay, childNode.aabbMin.xyz, childNode.aabbMax.xyz )) {

            // If intersection was a leaf then it has children triangles, so return red
			if (childNode.instanceCount > 0) {

				for (int j = 0; j < childNode.instanceCount; j++) {

					const uint result = TriIndices[BLASNodes[currentNodeIndex].leftNode + j + baseTriangleIndex];

					uint idx0 = Indices[result * 3 + 0 + baseIndex] + baseVertex;
					uint idx1 = Indices[result * 3 + 1 + baseIndex] + baseVertex;
					uint idx2 = Indices[result * 3 + 2 + baseIndex] + baseVertex;

					vec3 v0 = vec3(Vertices[idx0].position[0], Vertices[idx0].position[1], Vertices[idx0].position[2]);
					vec3 v1 = vec3(Vertices[idx1].position[0], Vertices[idx1].position[1], Vertices[idx1].position[2]);
					vec3 v2 = vec3(Vertices[idx2].position[0], Vertices[idx2].position[1], Vertices[idx2].position[2]);

					float rayMin = 0.0000;
					float rayMax = adjustedRay.t;

					bool triHit = TriIntersectBoolVersion(adjustedRay.origin, adjustedRay.dir, rayMin, rayMax, v0, v1, v2);

					if (triHit) {
						return vec3(1,1,1);
					}
				}
			}
			else {
				// If not a leaf, add children to stack
				stack[stackIndex] = childNode.leftNode + rootIndex;
				stackIndex++;
				stack[stackIndex] = childNode.leftNode + 1 + rootIndex;
				stackIndex++;
			}
        }

		if (stackIndex == 0) {
			return vec3(-1, -1, -1);
		}
    }
    // If you made it this far the BVH is broken
    return vec3(-1);
}

vec3 IntersectTLAS(Ray ray, const uint nodeIdx ) {

    BVHNode rootNode = TLASNodes[nodeIdx];

    // Early out if ray doesn't even hit the root node
    if (!IntersectAABB( ray, rootNode.aabbMin, rootNode.aabbMax )) {
        return vec3(0,0,0);
    }

    // Create the stack
    uint stack[8];
    uint stackIndex = 0;

    // Push root node to the stack nodes
    stack[stackIndex] = 0;
    stackIndex++;

    // Iterate the stack while it still contains nodes
    while (stackIndex > 0) {

        // Pop current node
        stackIndex--;

        uint currentNodeIndex = stack[stackIndex];
        BVHNode childNode = TLASNodes[currentNodeIndex];

        if (IntersectAABB( ray, childNode.aabbMin.xyz, childNode.aabbMax.xyz )) {

            // If intersection was a leaf then it has children
			if (childNode.instanceCount > 0) {

				unsigned int blasIndex = childNode.leftNode;
				vec3 result = IntersectBLAS(ray, 0, blasIndex);

				// Successful hit
				if (result != vec3(-1)) {
					return vec3(1,1,1);
				}
			}
			// If not a leaf, add children to stack
			else {
				stack[stackIndex] = childNode.leftNode;
				stackIndex++;
				stack[stackIndex] = childNode.leftNode + 1;
				stackIndex++;
			}
        }
        if (stackIndex == 0) {
            return vec3(0,0,0);
            return vec3(1,1,1);
        }
    }
    // If you made it this far the BVH is broken
    return vec3(0,0,1);
}

float rand(vec2 co) {
	return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float map(float value, float min1, float max1, float min2, float max2) {
	float perc = (value - min1) / (max1 - min1);
	return perc * (max2 - min2) + min2;
}

void main() {

//	return;

	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	uint z = gl_GlobalInvocationID.z;

	// If out of range, skip processing
    if (x >= probeSpaceWidth ||
        y >= probeSpaceHeight ||
        z >= probeSpaceDepth) {
        return;
    }

	int testframeNumber = 0;
	uint group = (x * 3 + y * 5 + z * 7 + frameNumber) % 8;
	if (group != 0) {
		//imageStore(texture3D, ivec3(x,y,z), vec4(1, 0, 0, 1));
		return; // Skip this group in this frame
	}

	float probeWorldX = (x * probeSpacing) + lightVolumePosition.x;
	float probeWorldY = (y * probeSpacing) + lightVolumePosition.y;
	float probeWorldZ = (z * probeSpacing) + lightVolumePosition.z;
	vec3 probePosition = vec3(probeWorldX, probeWorldY, probeWorldZ);

	float maxDistance = 3.0;
	vec3 finalColor = vec3(0, 0, 0);

	for (int i = 0; i < cloudPointCount; i++) {

		vec3 pointPosition = vec3(PointCloud[i].posX, PointCloud[i].posY, PointCloud[i].posZ);
		vec3 pointNormal = vec3(PointCloud[i].normX, PointCloud[i].normY, PointCloud[i].normZ);
		vec3 pointColor = vec3(PointCloud[i].colorX, PointCloud[i].colorY, PointCloud[i].colorZ);
		vec3 rayDir = normalize(pointPosition - probePosition);

		float distanceSquared = DistanceSquared(pointPosition, probePosition);

		if (distanceSquared < maxDistance * maxDistance && pointColor != vec3(0,0,0)) {

			float dist = distance(pointPosition, probePosition);

			// If the point is not facing away from the probe...
			vec3 v = normalize(probePosition - pointPosition);
			float vdotn = dot(pointNormal, v);
			if (vdotn < 0.25) {
				continue;
			}

			float rayDistance = sqrt(distanceSquared);

			Ray ray;
			ray.origin = probePosition;
			ray.dir = rayDir;
			ray.inverseDir.x = SafeInverse(ray.dir.x);
			ray.inverseDir.y = SafeInverse(ray.dir.y);
			ray.inverseDir.z = SafeInverse(ray.dir.z);
			ray.t = dist;

			vec3 rayResult = IntersectTLAS(ray, 0);

			// If no line of sight...
			if (rayResult == vec3(1, 1, 1)) {
				//finalColor = vec3(0, 0, 0);
			} else {
				//vec3 value  = pointColor;
				//vec3 value  = pointColor.rgb * (maxDistance - dist) / maxDistance;
				//vec3 value  = vdotn * pointColor.rgb * (maxDistance - dist) / maxDistance;
				//vec3 value  = pointColor.rgb * (maxDistance - dist) * (maxDistance - dist) / maxDistance;
				//vec3 value = vdotn * pointColor.rgb * (maxDistance - dist) * (maxDistance - dist) / maxDistance;
				vec3 value = pointColor / dist;
				//vec3 value += vdotn * pointColor.rgb
				//finalColor += value * 0.0035;
				finalColor += value * 0.003535;
			}
		}
	}

	imageStore(texture3D, ivec3(x,y,z), vec4(finalColor, 1));

}