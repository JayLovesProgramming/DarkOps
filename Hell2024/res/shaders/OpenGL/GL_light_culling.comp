#version 430 core

#define TILE_SIZE 24
layout(local_size_x = TILE_SIZE, local_size_y = TILE_SIZE, local_size_z = 1) in;

layout(rgba8, binding = 0) uniform image2D tex;
layout(rgba16f, binding = 1) uniform image2D normalTexture;

layout (binding = 0) uniform sampler2D depthTexture;

uniform float viewportWidth;
uniform float viewportHeight;
uniform int lightCount;
uniform int tileXCount;
uniform int tileYCount;

shared uint minWorldSpaceXInt;
shared uint maxWorldSpaceXInt;
shared uint minWorldSpaceYInt;
shared uint maxWorldSpaceYInt;
shared uint minWorldSpaceZInt;
shared uint maxWorldSpaceZInt;

shared uint tilelightCount;
shared uint validDepthSampleCount;
shared vec3 debugOutputColor;

struct CameraData {
    mat4 projection;
    mat4 projectionInverse;
    mat4 view;
    mat4 viewInverse;
	float viewportWidth;
	float viewportHeight;
    float viewportOffsetX;
    float viewportOffsetY;
	float clipSpaceXMin;
    float clipSpaceXMax;
    float clipSpaceYMin;
    float clipSpaceYMax;
	float finalImageColorContrast;
    float finalImageColorR;
    float finalImageColorG;
    float finalImageColorB;
};

struct Light {
    float posX;
    float posY;
    float posZ;
    float colorR;
    float colorG;
    float colorB;
    float strength;
    float radius;
    int shadowMapIndex;
    int contributesToGI;
    float padding0;
    float padding1;
};

struct LightVolumeData {
	float aabbMinX;
	float aabbMinY;
	float aabbMinZ;
	float padding;
	float aabbMaxX;
	float aabbMaxY;
	float aabbMaxZ;
	float padding2;
};

struct TileData {
    uint lightCount;
    uint lightIndices[127];
};

layout(std430, binding = 2) readonly buffer Lights {
    Light lights[];
};

layout(std430, binding = 16) readonly buffer CameraDataArray {
    CameraData cameraDataArray[];
};

layout(std430, binding = 19) buffer Buffer {
    LightVolumeData lightVolumeData[];
};

layout(std430, binding = 20) buffer Buffer2 {
    TileData tileData[];
};

bool SphereVsAABB(vec3 aabbMin, vec3 aabbMax, vec3 sphereOrigin, float sphereRadius) {
    vec3 closestPoint = clamp(sphereOrigin, aabbMin, aabbMax);
    float distanceSquared = dot(closestPoint - sphereOrigin, closestPoint - sphereOrigin);
    return distanceSquared <= (sphereRadius * sphereRadius);
}

bool AABBsIntersect(vec3 minA, vec3 maxA, vec3 minB, vec3 maxB) {
    return !(minA.x > maxB.x || maxA.x < minB.x ||
             minA.y > maxB.y || maxA.y < minB.y ||
             minA.z > maxB.z || maxA.z < minB.z);
}

uint OrderPreservingFloatMap(float value) {
    uint uvalue = floatBitsToUint(value);
    uint mask = -int(uvalue >> 31) | 0x80000000;
    return uvalue ^ mask;
}

float InverseOrderPreservingFloatMap(uint value) {
    uint mask = ((value >> 31) - 1) | 0x80000000;
    return uintBitsToFloat(value ^ mask);
}

void main2() {

}

void main() {

	const int tileSize = TILE_SIZE;	

	vec2 viewportSize = vec2(viewportWidth, viewportHeight);
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
	//vec2 uv = vec2(pixelCoords) / viewportSize;
	vec2 uv = (vec2(pixelCoords) + vec2(0.5)) / viewportSize;
	
	vec3 color = imageLoad(tex, pixelCoords).rgb;

	// Load player viewport data
	int playerIndex = int(imageLoad(normalTexture, pixelCoords).a * 4 + 0.5);
	vec3 fragmentNormal = imageLoad(normalTexture, pixelCoords).rgb;
	mat4 inverseProjection = cameraDataArray[playerIndex].projectionInverse;
	mat4 inverseView = cameraDataArray[playerIndex].viewInverse;
	vec3 viewPos = cameraDataArray[playerIndex].viewInverse[3].xyz;
	float clipSpaceXMin = cameraDataArray[playerIndex].clipSpaceXMin;
	float clipSpaceXMax = cameraDataArray[playerIndex].clipSpaceXMax;
	float clipSpaceYMin = cameraDataArray[playerIndex].clipSpaceYMin;
	float clipSpaceYMax = cameraDataArray[playerIndex].clipSpaceYMax;

	// move this to the camera struct
	mat4 projection = cameraDataArray[playerIndex].projection;
	mat4 view = cameraDataArray[playerIndex].view;
	mat4 projectionView = projection * view;
	
	float z = texture(depthTexture, uv).r;
    vec2 clipSpaceTexCoord = uv;
	clipSpaceTexCoord.x = (clipSpaceTexCoord.x - clipSpaceXMin) / (clipSpaceXMax - clipSpaceXMin);
	clipSpaceTexCoord.y = (clipSpaceTexCoord.y - clipSpaceYMin) / (clipSpaceYMax - clipSpaceYMin);
	vec4 clipSpacePosition = vec4(clipSpaceTexCoord * 2.0 - 1.0, z, 1.0);
    vec4 viewSpacePosition = inverseProjection * clipSpacePosition;
    viewSpacePosition /= viewSpacePosition.w;
    vec4 worldSpacePosition = inverseView * viewSpacePosition;
	
	uint tileIndex = gl_WorkGroupID.y * tileXCount + gl_WorkGroupID.x;

	// Defaults
	if (gl_LocalInvocationIndex == 0) {	
		minWorldSpaceXInt = 0xFFFFFFFF;
		minWorldSpaceYInt = 0xFFFFFFFF;
		minWorldSpaceZInt = 0xFFFFFFFF;
		maxWorldSpaceXInt = 0;
		maxWorldSpaceYInt = 0;
		maxWorldSpaceZInt = 0;		
		tileData[tileIndex].lightCount = 0;	
		tilelightCount = 0;
		validDepthSampleCount = 0;
	}
	barrier();

	// Atomically store min max depth 
	bool validFragment = fragmentNormal != vec3(0, 0, 0);
	if (validFragment) {
		uint worldSpaceXInt = OrderPreservingFloatMap(worldSpacePosition.x);
		uint worldSpaceYInt = OrderPreservingFloatMap(worldSpacePosition.y);
		uint worldSpaceZInt = OrderPreservingFloatMap(worldSpacePosition.z);	
		atomicMin(minWorldSpaceXInt, worldSpaceXInt);
		atomicMin(minWorldSpaceYInt, worldSpaceYInt);
		atomicMin(minWorldSpaceZInt, worldSpaceZInt);  
		atomicMax(maxWorldSpaceXInt, worldSpaceXInt);
		atomicMax(maxWorldSpaceYInt, worldSpaceYInt);
		atomicMax(maxWorldSpaceZInt, worldSpaceZInt);
		atomicAdd(validDepthSampleCount, 1);
	}
    barrier();

	// Get this tiles min max world pos
	float worldSpaceXMin = InverseOrderPreservingFloatMap(minWorldSpaceXInt);
	float worldSpaceYMin = InverseOrderPreservingFloatMap(minWorldSpaceYInt);
	float worldSpaceZMin = InverseOrderPreservingFloatMap(minWorldSpaceZInt);
	float worldSpaceXMax = InverseOrderPreservingFloatMap(maxWorldSpaceXInt);
	float worldSpaceYMax = InverseOrderPreservingFloatMap(maxWorldSpaceYInt);
	float worldSpaceZMax = InverseOrderPreservingFloatMap(maxWorldSpaceZInt);
	vec3 worldSpaceMin = vec3(worldSpaceXMin, worldSpaceYMin, worldSpaceZMin);
	vec3 worldSpaceMax = vec3(worldSpaceXMax, worldSpaceYMax, worldSpaceZMax);	
	
	// Light culling
	if (validDepthSampleCount > 0) {
		int invocationCount = tileSize * tileSize;
		int loopCount = (lightCount + invocationCount - 1) / invocationCount;
		for (int i = 0; i < loopCount; i++) {		
			uint lightIndex = gl_LocalInvocationIndex + i * invocationCount;
			if (lightIndex < lightCount) {
				vec3 lightPos = vec3(lights[lightIndex].posX, lights[lightIndex].posY, lights[lightIndex].posZ);
				float lightRadius = lights[lightIndex].radius;			
				vec3 lightAabbMin = vec3(lightVolumeData[lightIndex].aabbMinX, lightVolumeData[lightIndex].aabbMinY, lightVolumeData[lightIndex].aabbMinZ);
				vec3 lightAabbMax = vec3(lightVolumeData[lightIndex].aabbMaxX, lightVolumeData[lightIndex].aabbMaxY, lightVolumeData[lightIndex].aabbMaxZ);	
				if (AABBsIntersect(worldSpaceMin, worldSpaceMax, lightAabbMin, lightAabbMax) && SphereVsAABB(worldSpaceMin, worldSpaceMax, lightPos, lightRadius)) {
					uint index = atomicAdd(tilelightCount, 1);
					tileData[tileIndex].lightIndices[index] = int(lightIndex);	
				}
			}
		}
	}
	barrier();

	if (gl_LocalInvocationIndex == 0) {
		tileData[tileIndex].lightCount = tilelightCount;
		debugOutputColor = worldSpaceMin;
	}
}
