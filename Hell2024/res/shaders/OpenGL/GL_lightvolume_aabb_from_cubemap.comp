#version 430 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0) uniform sampler2DArray lightVolumeShadowMapArray;

struct LightVolumeData {
	float aabbMinX;
	float aabbMinY;
	float aabbMinZ;
	float padding;
	float aabbMaxX;
	float aabbMaxY;
	float aabbMaxZ;
	float padding2;
};

struct Light {
    float posX;
    float posY;
    float posZ;
    float colorR;
    float colorG;
    float colorB;
    float strength;
    float radius;
    int shadowMapIndex;
    int contributesToGI;
    float padding0;
    float padding1;
};

layout(std430, binding = 2) readonly buffer Lights {
    Light lights[];
};

layout(std430, binding = 19) buffer Buffer {
    LightVolumeData lightVolumeData[];
};

uniform int lightIndex;

void main() {

	const int SHADOW_MAP_SIZE = 256;
			
	float minX = 10000;
	float minY = 10000;
	float minZ = 10000;
	float maxX = -10000;
	float maxY = -10000;
	float maxZ = -10000;

	Light light = lights[lightIndex];

	for (int x = 0; x < SHADOW_MAP_SIZE; x++) {
		for (int y = 0; y < SHADOW_MAP_SIZE; y++) {	
			for (int f = 0; f < 6; f++) {				
				vec3 worldPos = texelFetch(lightVolumeShadowMapArray, ivec3(x, y, f), 0).rgb;				
				minX = min(minX, worldPos.x); 
				minY = min(minY, worldPos.y); 
				minZ = min(minZ, worldPos.z); 
				maxX = max(maxX, worldPos.x); 
				maxY = max(maxY, worldPos.y); 
				maxZ = max(maxZ, worldPos.z); 
				
				if (f == 0 && worldPos.z == 0.0) {
					minX = light.posX - light.radius;
				}
				if (f == 1 && worldPos.z == 0.0) {
					maxX = light.posX + light.radius;
				}
				if (f == 2 && worldPos.z == 0.0) {
					minY = light.posY - light.radius;
				}
				if (f == 3 && worldPos.z == 0.0) {
					maxY = light.posY + light.radius;
				}
				if (f == 4 && worldPos.z == 0.0) {
					minZ = light.posZ - light.radius;
				}
				if (f == 5 && worldPos.z == 0.0) {
					maxZ = light.posZ + light.radius;
				}
			}	
		}
	}
	lightVolumeData[lightIndex].aabbMinX = minX - 0.01;
	lightVolumeData[lightIndex].aabbMinY = minY - 0.01;
	lightVolumeData[lightIndex].aabbMinZ = minZ - 0.01;
	lightVolumeData[lightIndex].aabbMaxX = maxX + 0.01;
	lightVolumeData[lightIndex].aabbMaxY = maxY + 0.01;
	lightVolumeData[lightIndex].aabbMaxZ = maxZ + 0.01;

}