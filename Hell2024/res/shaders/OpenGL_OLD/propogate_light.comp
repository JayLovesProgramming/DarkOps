#version 430 core

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(rgba16f, binding = 1) uniform image3D imgOutput;

struct RTMesh {
    int baseVertex;
    int vertexCount;
    int padding0;
    int padding1;
};

struct RTInstance {
    mat4 modelMatrix;
    mat4 inverseModelMatrix;
    int meshIndex;
    int padding0;
    int padding1;
    int padding2;
};

struct CloudPoint {
    vec4 position;
    vec4 normal;
    vec4 color;
};

struct DispatchParams {
    uint  num_groups_x;
    uint  num_groups_y;
    uint  num_groups_z;
};

layout(std430, binding = 0) readonly buffer dirtyPointCloudIndices {
    int DirtyPointCloudIndices[];
};

layout(std430, binding = 1) readonly buffer vertices {
    vec4 Vertices[];
};

layout(std430, binding = 2) buffer pointCloudvertices {
    CloudPoint PointCloud[];
};

layout(std430, binding = 3) readonly buffer meshes {
    RTMesh Meshes[];
};

layout(std430, binding = 4) readonly buffer instances {
    RTInstance Instances[];
};

layout(std430, binding = 5) readonly buffer listCounter {
    uint ListCounter;
};

layout(std430, binding = 6) readonly buffer params {
    DispatchParams dispatchParams;
};

layout(std430, binding = 7) readonly buffer propogationList {
    uvec4 PropogationList[];
};

layout(std430, binding = 8) readonly buffer propogationListNew {
    uvec4 PropogationListNew[];
};

layout (location = 0) uniform int pointCloudSize;
layout (location = 1) uniform float propogationGridSpacing;
layout (location = 2) uniform int meshCount;
layout (location = 3) uniform int instanceCount;
layout (location = 4) uniform float maxDistance;
layout (location = 5) uniform int dirtyPointCloudIndexCount;



bool TriIntersect(vec3 origin, vec3 direction, float rayMin, float rayMax, vec3 v0, vec3 v1, vec3 v2) {

	vec3 a = v0 - v1;
	vec3 b = v2 - v0;
	vec3 p = v0 - origin;
	vec3 n = cross(b, a);
	float r = dot(direction, n);

    //ignore back face
    if (r > 0)
		return false;

	// some other early out
	if (abs(r) < 0.00001)
		return false;

	vec3 q = cross( p, direction );
	r = 1.0 / r;
	float u = dot( q, b )*r;
	float v = dot( q, a )*r;
	float t = dot( n, p )*r;

	if( u<0.0 || v<0.0 || (u+v)>1.0 )
		t = -1.0;

	// Ray max is squared to save on square root
	if (t > rayMin && t * t < rayMax) {
		return true;
	}
	return false;
}

bool AnyHit(vec3 origin, vec3 direction, float rayMin, float rayMax) {

	for (int i = 0; i < instanceCount; i++) {
		RTInstance instance = Instances[i];
		RTMesh mesh = Meshes[instance.meshIndex];
		int baseVertex = mesh.baseVertex;
		int vertexCount = mesh.vertexCount;

		vec3 adjustedDirection = normalize(instance.inverseModelMatrix * vec4(direction, 0.0)).xyz;
		vec3 adjustedOrigin = (instance.inverseModelMatrix * vec4(origin, 1.0)).xyz;

		for (int j = baseVertex; j < vertexCount + baseVertex; j+=3) {
			vec3 v0 = Vertices[j + 0].xyz;
			vec3 v1 = Vertices[j + 1].xyz;
			vec3 v2 = Vertices[j + 2].xyz;
			bool hit = TriIntersect(adjustedOrigin, adjustedDirection, rayMin, rayMax, v0, v1, v2);
			if (hit) {
				return true;
			}
		}
	}
	return false;
}

float distanceSquared( vec3 A, vec3 B ) {
    vec3 C = A - B;
    return dot( C, C );
}

void main() {


    const uint index = (gl_WorkGroupID.x * 64) + gl_LocalInvocationID.x;
    const uint x = PropogationListNew[index].x;
    const uint y = PropogationListNew[index].y;
    const uint z = PropogationListNew[index].z;


    //const uint x = (gl_WorkGroupID.x * 4) + gl_LocalInvocationID.x;
    //const uint y = (gl_WorkGroupID.y * 4) + gl_LocalInvocationID.y;
    //const uint z = (gl_WorkGroupID.z * 4) + gl_LocalInvocationID.z;

	//const float probeSpacing = 0.2;
	vec3 probePosition = vec3(x,y,z) * propogationGridSpacing;

	vec3 color = vec3(0);

	for (int i = 0; i < dirtyPointCloudIndexCount; i++) {

		const int index = DirtyPointCloudIndices[i];
		CloudPoint point = PointCloud[index];

		// If the probe is within the max distance...
		float distanceToProbeSquared = distanceSquared(point.position.xyz, probePosition);

		if (distanceToProbeSquared < maxDistance * maxDistance) {

			// If the point is not facing away from the probe...
			vec3 v = normalize(probePosition - point.position.xyz);
			float vdotn = dot(point.normal.xyz, v);
			if (vdotn < 0.0) {
				continue;
			}
			// asking ai to optimize AnyHit and TriIntersection lol

			// If the point has line of sight to the probe...
			if (!AnyHit(point.position.xyz, v, 0.00001, distanceToProbeSquared)) {

				float distanceFromPointToProbe = sqrt(distanceToProbeSquared);
				//color += point.color.rgb * (maxDistance - distanceFromPointToProbe) / maxDistance;
				//color += vdotn * point.color.rgb * (maxDistance - distanceFromPointToProbe) / maxDistance;
				//color += point.color.rgb * (maxDistance - distanceFromPointToProbe) * (maxDistance - distanceFromPointToProbe) / maxDistance;
				//color += vdotn * point.color.rgb * (maxDistance - distanceFromPointToProbe) * (maxDistance - distanceFromPointToProbe) / maxDistance;
				color += point.color.rgb / distanceFromPointToProbe;
				//color += vdotn * point.color.rgb;
			}
		}

	}
	float scale = 900.0;

	color = color / scale;

	// Mark probes as -1 if they have no light, that way they aren't interpolated in the lighting shader
	float colorLength = length(color);
	if (colorLength < 0.001) {
		color = vec3(-1);
	}
	// Otherwise, if they reieved at least some color, then write that to the 3d texture
	else if (colorLength > 0) {
		imageStore(imgOutput, ivec3(x, y, z), vec4(color, 1));
	}
}