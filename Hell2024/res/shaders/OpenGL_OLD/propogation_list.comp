#version 430 core

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

struct CloudPoint {
    vec4 position;
    vec4 normal;
    vec4 color;
};

layout(std430, binding = 0) buffer listCounter {
    uint ListCounter;
};

layout(std430, binding = 1) writeonly buffer propogationList {
    uvec4 PropogationList[];
};

layout(std430, binding = 2) readonly buffer dirtyPointCloudIndices {
    int DirtyPointCloudIndices[];
};

layout(std430, binding = 3) buffer pointCloud {
    CloudPoint PointCloud[];
};

layout(std430, binding = 4) readonly buffer floorVertices {
    vec4 FloorVertices[];
};

layout (location = 0) uniform int dirtyPointCloudIndexCount;
layout (location = 1) uniform float propogationGridSpacing;
layout (location = 2) uniform float maxDistanceSquared;
layout (location = 3) uniform int floorVertexCount;

float DistanceSquared( vec3 A, vec3 B ) {
    vec3 C = A - B;
    return dot( C, C );
}

layout(rgba16f, binding = 1) uniform image3D imgOutput;



float sign(vec2 p1, vec2 p2, vec2 p3) {
    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);
}

bool PointIn2DTriangle(vec2 pt, vec2 v1, vec2 v2, vec2 v3) {
    float d1, d2, d3;
    bool has_neg, has_pos;
    d1 = sign(pt, v1, v2);
    d2 = sign(pt, v2, v3);
    d3 = sign(pt, v3, v1);
    has_neg = (d1 < 0) || (d2 < 0) || (d3 < 0);
    has_pos = (d1 > 0) || (d2 > 0) || (d3 > 0);
    return !(has_neg && has_pos);
}

void main() {
    
    const uint x = (gl_WorkGroupID.x * 4) + gl_LocalInvocationID.x;
    const uint y = (gl_WorkGroupID.y * 4) + gl_LocalInvocationID.y;
    const uint z = (gl_WorkGroupID.z * 4) + gl_LocalInvocationID.z;

    vec3 probePosition = vec3(x,y,z) * propogationGridSpacing;

    // Skip probes outside the map
    
    // if (probeColor.a == 0) {
    //    you are outside the map, so do nothing.
    //}

    if (probePosition.y > 2.7 || probePosition.y < 0.1) {
        return;
    }
    
    bool found = false;
    for (int j = 0; j < floorVertexCount; j+=3) {
        vec2 probePos = vec2(probePosition.x, probePosition.z);
        vec2 v1 = vec2(FloorVertices[j + 0].x, FloorVertices[j + 0].z);
        vec2 v2 = vec2(FloorVertices[j + 1].x, FloorVertices[j + 1].z);
        vec2 v3 = vec2(FloorVertices[j + 2].x, FloorVertices[j + 2].z);
        if (PointIn2DTriangle(probePos, v1, v2, v3)) {
            found = true;            
            break;
        }
    }
    if (!found) {
        return;
    }

    for(int i = 0; i < dirtyPointCloudIndexCount; i++) {
	    vec3 cloudPointPosition = PointCloud[DirtyPointCloudIndices[i]].position.xyz;   
        vec3 cloudPointNormal = PointCloud[DirtyPointCloudIndices[i]].normal.xyz;
        
        if (DistanceSquared(cloudPointPosition, probePosition) < maxDistanceSquared) { 
        
            // skip probe if cloud point faces away from probe                
            float r = dot(normalize(cloudPointPosition - probePosition), cloudPointNormal);
            if (r > 0.0) {
                continue;
            }

            uint listIndex = atomicAdd(ListCounter, 1);
            PropogationList[listIndex] = uvec4(x,y,z,0);
            return;
        }
    }    
}