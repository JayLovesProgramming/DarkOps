#version 430 core

layout (local_size_x = 4, local_size_y = 4, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;

layout(std430, binding = 1) readonly buffer vertices {
    vec4 Vertices[];
};

layout (location = 0) uniform mat4 projInverse;
layout (location = 1) uniform mat4 viewInverse;
layout (location = 2) uniform int vertexCount;


struct Hit {
	bool found;
	float dist;
	vec2 attribs;
	vec3 baryCentrics;
	vec3 position;
	vec3 normal;
};

Hit TriIntersect(vec3 origin, vec3 direction, float rayMin, float rayMax, vec3 v0, vec3 v1, vec3 v2) {

	vec3 a = v0 - v1;
	vec3 b = v2 - v0;
	vec3 p = v0 - origin;
	vec3 n = cross(b, a);
	float r = dot(direction, n); 

	Hit hit;
	hit.found = false;

    //ignore back face
    if (r > 0) 
		return hit;    

	// some other early out
	if (abs(r) < 0.00001) 
		return hit;

	vec3 q = cross( p, direction );
	r = 1.0 / r;
	float u = dot( q, b )*r;
	float v = dot( q, a )*r;
	float t = dot( n, p )*r;

	if( u<0.0 || v<0.0 || (u+v)>1.0 ) 
		t = -1.0;

	if (t > rayMin && t < rayMax) {
		hit.found = true;
		hit.dist = t;
		hit.attribs = vec2(u, v);
		hit.baryCentrics = vec3(1.0 - u - v, u, v);
		hit.position = vec3(v0 * hit.baryCentrics.x + v1 * hit.baryCentrics.y + v2 * hit.baryCentrics.z);
		hit.normal = n;
	}
	return hit;
}

bool AnyHit(vec3 origin, vec3 direction, float rayMin, float rayMax) {
	for (int i = 0; i < vertexCount; i+=3) {	
		vec3 v0 = Vertices[i + 0].xyz;
		vec3 v1 = Vertices[i + 1].xyz;
		vec3 v2 = Vertices[i + 2].xyz;
		Hit hit = TriIntersect(origin, direction, rayMin, rayMax, v0, v1, v2);
		if (hit.found) { 
			return true;
		}
	}
	return false;
}

Hit ClosestHit(vec3 origin, vec3 direction, float rayMin, float rayMax) {

	Hit closestHit;
	closestHit.found = false;
	float distanceToClosestHit = 9999;

	for (int i = 0; i < vertexCount; i+=3) {	
		vec3 v0 = Vertices[i + 0].xyz;
		vec3 v1 = Vertices[i + 1].xyz;
		vec3 v2 = Vertices[i + 2].xyz;

		Hit hit = TriIntersect(origin.xyz, direction.xyz, 0.000001, 100, v0, v1, v2);	
		
		if (hit.found && hit.dist < distanceToClosestHit) { 
			closestHit = hit;
			distanceToClosestHit = closestHit.dist;
		}
	}
	return closestHit;
}

void main() {

	vec2 uv = gl_GlobalInvocationID.xy / vec2(imageSize(imgOutput)); 
	vec2 d = uv * 2.0 - 1.0;
	vec4 origin = viewInverse * vec4(0,0,0,1);
	vec4 target = projInverse * vec4(d.x, d.y, 1, 1);
	vec4 direction = viewInverse*vec4(normalize(target.xyz / target.w), 0);	

	vec3 color = vec3(0,0,0);

	Hit closestHit = ClosestHit(origin.xyz, direction.xyz, 0.000001, 100);

	if (closestHit.found) {
	
		// Lighting
		vec3 lightPos = vec3(2.8, 2.2, 3.6);
		vec3 lightColor = vec3(1, 0.8, 0.55);
		float lightRadius = 10;
		float lightStrength = 1.0;
		float distToLight = distance(lightPos, closestHit.position);
		float att = smoothstep(lightRadius, 0.0, length(lightPos - closestHit.position));
		vec3 n = normalize(closestHit.normal);
		vec3 l = normalize(lightPos - closestHit.position);
		float ndotl = clamp(dot(n, l), 0.0f, 1.0f);  
		vec3 radiance = vec3(lightColor) * att * lightStrength * ndotl * 1.0;

		// Shadow ray
		if (!AnyHit(closestHit.position, l, 0.000001, distToLight)) {
			color = radiance;
		}
	}
	
	imageStore(imgOutput, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1));
}

