#version 430 core

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct CloudPoint {
    vec4 position;
    vec4 normal;
    vec4 color;
};

struct RTMesh {
    int baseVertex;
    int vertexCount;
    int padding0;
    int padding1;
};

struct RTInstance {
    mat4 modelMatrix;
    mat4 inverseModelMatrix;
    int meshIndex;
    int padding0;
    int padding1;
    int padding2;
};

layout(std430, binding = 0) readonly buffer dirtyPointCloudIndices {
    int DirtyPointCloudIndices[];
};

layout(std430, binding = 1) readonly buffer vertices {
    vec4 Vertices[];
};

layout(std430, binding = 2) buffer pointCloudvertices {
    CloudPoint PointCloud[];
};

layout(std430, binding = 3) readonly buffer meshes {
    RTMesh Meshes[];
};

layout(std430, binding = 4) readonly buffer instances {
    RTInstance Instances[];
};

struct Light {
	vec3 position;
	vec3 color;
	float strength;
	float radius;
};

layout (location = 0) uniform int meshCount;
layout (location = 1) uniform int instanceCount;

layout (location = 3) uniform int lightCount;

layout (location = 4) uniform Light lights[32];

bool TriIntersect(vec3 origin, vec3 direction, float rayMin, float rayMax, vec3 v0, vec3 v1, vec3 v2) {

	vec3 a = v0 - v1;
	vec3 b = v2 - v0;
	vec3 p = v0 - origin;
	vec3 n = cross(b, a);
	float r = dot(direction, n); 

    //ignore back face
    if (r > 0) 
		return false;    

	// some other early out
	if (abs(r) < 0.00001) 
		return false;

	vec3 q = cross( p, direction );
	r = 1.0 / r;
	float u = dot( q, b )*r;
	float v = dot( q, a )*r;
	float t = dot( n, p )*r;

	if( u<0.0 || v<0.0 || (u+v)>1.0 ) 
		t = -1.0;

	if (t > rayMin && t < rayMax) {
		return true;
	}
	return false;
}

bool AnyHit(vec3 origin, vec3 direction, float rayMin, float rayMax) {

	for (int i = 0; i < instanceCount; i++) {
		RTInstance instance = Instances[i];
		RTMesh mesh = Meshes[instance.meshIndex];		
		int baseVertex = mesh.baseVertex;
		int vertexCount = mesh.vertexCount;

		vec3 adjustedDirection = normalize(instance.inverseModelMatrix * vec4(direction, 0.0)).xyz;
		vec3 adjustedOrigin = (instance.inverseModelMatrix * vec4(origin, 1.0)).xyz;

		for (int j = baseVertex; j < vertexCount + baseVertex; j+=3) {	
			vec3 v0 = Vertices[j + 0].xyz;
			vec3 v1 = Vertices[j + 1].xyz;
			vec3 v2 = Vertices[j + 2].xyz;		
			bool hit = TriIntersect(adjustedOrigin, adjustedDirection, rayMin, rayMax, v0, v1, v2);
			if (hit) { 
				return true;
			}
		}
	}
	return false;
}

void main() {

    const uint k = (gl_WorkGroupID.x * 64) + gl_LocalInvocationID.x;
	const int i = DirtyPointCloudIndices[k];

	vec3 origin = PointCloud[i].position.xyz;
	vec3 normal = PointCloud[i].normal.xyz;
	
	PointCloud[i].color.rgb = vec3(0,0,0);
	
    for(int j = 0; j < lightCount; j++) 	{
		vec3 lightPos = lights[j].position;
		vec3 lightColor = lights[j].color;
		float lightRadius = lights[j].radius;
		float lightStrength = lights[j].strength;
		float distToLight = distance(lightPos, origin);
		vec3 l = normalize(lightPos - origin);

		if (!AnyHit(origin, l, 0.000001, distToLight)) {
			float att = smoothstep(lightRadius, 0.0, length(lightPos - origin));
			vec3 n = normal;
			float ndotl = clamp(dot(n, l), 0.0, 1.0);  
			vec3 radiance = vec3(lightColor) * att * lightStrength * ndotl * 1.0;
			radiance *= 2.5;
			PointCloud[i].color.rgb += radiance;
		} 
	}
}